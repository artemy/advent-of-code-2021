(ns day_20-test
  (:require [clojure.test :refer [deftest is]]
            [day_20 :refer [part-01 part-02]]))

(def test-data
                ""
                "#..#."
                "#...."
                "##..#"
                "..#.."
                "..###"])

(deftest part-01-test
  (let [expected 35]
    (is (= (part-01 test-data) expected))))

(deftest part-02-test
  (let [expected 3351]
    (is (= (part-02 test-data) expected))))
